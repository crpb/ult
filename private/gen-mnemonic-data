#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2021-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

'''
generate mnemonic data from RFC 1345
'''

import gzip
import re

0_0  # Python >= 3.6 is required

def main():
    seen = set()
    data = {}
    path = '/usr/share/doc/RFC/links/rfc1345.txt.gz'
    errata_chars = {
        # https://www.rfc-editor.org/errata/eid2683
        '\N{LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW}',
        '\N{LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE}',
    }
    with gzip.open(path, 'rt', encoding='ASCII') as file:
        for line in file:
            match = re.match(r'^ (\S+) +([0-9a-f]{4}) +[A-Z]', line)
            if match:
                (s, pt) = match.groups()
                pt = int(pt, 16)
                ch = chr(pt)
                if ch in errata_chars:
                    assert s[0].upper()
                    s = s[0].lower() + s[1:]
                if s in seen:
                    raise RuntimeError(f'{path}: mnemonic {s!r} already seen')
                seen |= {s}
                if ch in data:
                    raise RuntimeError(f'{path}: U+{pt:04X} already seen')
                data[ch] = s
    def r(c):
        assert len(c) == 1
        i = ord(c)
        if i < 0x20 or (0x7F <= i < 0x100):
            return fr"'\x{i:02X}'"
        if i >= 0x80:
            return fr"'\u{i:04X}'"
        return ascii(c)
    for k, v in sorted(data.items()):
        if k == v:
            continue
        if 0xE000 < ord(k) <= 0xEFFF:
            # private-use characters
            continue
        print('   ', f'{r(k)}: {v!r},')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
