#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2021-2023 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

'''
look up Unicode character properties
'''

import argparse
import ast
import collections
import ctypes
import fnmatch
import fractions
import functools
import gzip
import html.entities
import itertools
import re
import signal
import sys
import typing
import unicodedata

try:
    import icu
except ImportError:
    icu = None

int(0_0)  # Python >= 3.6 is required

__doc__ = (__doc__ or '').strip()

prog = argparse.ArgumentParser().prog

__version__ = '0'  # not released yet

def trim_version(s):
    return re.sub(r'([.]\d+)[.]0\Z', r'\1', s)

class VersionAction(argparse.Action):
    '''
    argparse --version action
    '''

    def __init__(self, option_strings, dest=argparse.SUPPRESS):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=0,
            help='show version information and exit'
        )

    def __call__(self, parser, namespace, values, option_string=None):
        print(f'{parser.prog} {__version__}')
        print('+ Python {0}.{1}.{2}'.format(*sys.version_info))
        unidata_ver = trim_version(unicodedata.unidata_version)
        print(f'  + Unicode {unidata_ver}')
        if icu:
            print(f'+ PyICU {icu.VERSION}')
            print(f'  + Unicode {icu.UNICODE_VERSION}')
            print(f'  + ICU {icu.ICU_VERSION}')
        print('+ LibUniNamesList')
        print(f'  + Unicode {get_unl_version()}')
        aliases_version = get_aliases_version()
        aliases_version = trim_version(aliases_version)
        print(f'+ UCD NameAliases {aliases_version}')
        parser.exit()

def warning(msg):
    print(f'{prog}: {msg}', file=sys.stderr)

def error(msg):
    print(f'{prog}: {msg}', file=sys.stderr)
    sys.exit(1)

cache = functools.lru_cache(maxsize=1)

@cache
def _get_mnemonic_data():
    seen = set()
    data = {}
    path = '/usr/share/doc/RFC/links/rfc1345.txt.gz'
    errata_chars = {
        # https://www.rfc-editor.org/errata/eid2683
        '\N{LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW}',
        '\N{LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE}',
    }
    with gzip.open(path, 'rt', encoding='ASCII') as file:
        for line in file:
            match = re.match(r'^ (\S+) +([0-9a-f]{4}) +[A-Z]', line)
            if match:
                (s, pt) = match.groups()
                pt = int(pt, 16)
                ch = chr(pt)
                if ch in errata_chars:
                    assert s[0].upper()
                    s = s[0].lower() + s[1:]
                if s in seen:
                    raise RuntimeError(f'{path}: mnemonic {s!r} already seen')
                seen |= {s}
                if ch in data:
                    raise RuntimeError(f'{path}: U+{pt:04X} already seen')
                data[ch] = s
    return data

def get_mnemonic(ch):
    return _get_mnemonic_data().get(ch)

_x11_keys = dict(
    exclam='!',
    quotedbl='"',
    numbersign='#',
    percent='%',
    apostrophe="'",
    parenright=')',
    parenleft='(',
    asterisk='*',
    plus='+',
    comma=',',
    minus='-',
    period='.',
    slash='/',
    colon=':',
    semicolon=';',
    equal='=',
    question='?',
    bracketleft='[',
    backslash='\\',
    bracketright=']',
    asciicircum='^',
    underscore='_',
    grave='`',
    braceleft='{',
    bar='|',
    braceright='}',
    asciitilde='~',
)

@cache
def _get_x11_seq_data():
    data = collections.defaultdict(list)
    path = '/usr/share/X11/locale/en_US.UTF-8/Compose'
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            if line[:1] in {'#', '\n'}:
                continue
            match = re.match(r'(\S.*):\s*"(.*)"', line)
            if match is None:
                raise RuntimeError(f'{path}: cannot parse line {line!r}')
            (seq, ch) = match.groups()
            if len(ch) != 1:
                continue
            seq = seq.rstrip()
            def subst(match):
                orig = match.group()
                key = match.group(1)
                if len(key) == 1:
                    return key
                try:
                    return _x11_keys[key]
                except KeyError:
                    return orig
            seq = re.sub(r'<(\w+)>', subst, seq)
            data[ch] += [seq]
    return data

def get_x11_seqs(ch):
    return _get_x11_seq_data().get(ch)

@cache
def _get_html5_entities():
    data = collections.defaultdict(set)
    for ent, ch in html.entities.html5.items():
        if ent[-1:] != ';':
            ent += ';'
        data[ch].add(ent)
    return data

def get_html5_entities(ch):
    data = _get_html5_entities()
    return data.get(ch)

class Alias(typing.NamedTuple):
    name: str
    label: str

_alias_path = '/usr/share/unicode/NameAliases.txt'

@cache
def _get_alias_data():
    data = collections.defaultdict(list)
    path = _alias_path
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            line = line.rstrip('\n')
            if line[:1] in {'#', ''}:
                continue
            (pt, name, label) = line.split(';')
            ch = chr(int(pt, 16))
            data[ch] += [Alias(name, label)]
    return data

def get_aliases(ch):
    return _get_alias_data().get(ch)

def get_aliases_version():
    path = _alias_path
    match = None
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            match = re.match('^# NameAliases-([0-9.]+)[.]txt$', line)
            break
    if match:
        return match.group(1)

_libunl = ctypes.CDLL('libuninameslist.so.1')

# const char *uniNamesList_NamesListVersion(void);
_libunl_version =_libunl.uniNamesList_NamesListVersion
_libunl_version.argtypes = []
_libunl_version.restype = ctypes.c_char_p

def get_unl_version():
    v = _libunl_version()
    v = v.decode('ASCII')
    v = re.sub(r'\ANameslist-Version: ', '', v)
    return v

# const char *uniNamesList_annot(unsigned long uni);
_libunl_annot = _libunl.uniNamesList_annot
_libunl_annot.argtypes = [ctypes.c_ulong]
_libunl_annot.restype = ctypes.c_char_p

class Annot(typing.NamedTuple):
    see_also: list
    comments: list
    variations: list

def get_annot(ch):
    pt = ord(ch)
    s = _libunl_annot(pt)
    if s is None:
        return Annot([], [], {})
    s = s.decode('UTF-8')
    codes = 'x*:#%=~'
    lists = {}
    variations = {}
    for code in codes:
        lists[code] = []
    for line in s.splitlines():
        match = re.match(fr'\t([{re.escape(codes)}]) (\S.*)', line)
        if match is None:
            if line.startswith('\t\t'):
                # FIXME?
                continue
            warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
            continue
        (code, s) = match.groups()
        if code == 'x':
            match = re.fullmatch(r'(?:[(].* - ([0-9A-F]{4,})[)]|([0-9A-F]{4,}))', s)
            if match is None:
                warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
                continue
            xpt = int(match.group(1) or match.group(2), 16)
            s = chr(xpt)
        elif code == '~':
            match = re.fullmatch(fr'{pt:04X} (FE0[0-D]) (\S.*)', s)
            if match is None:
                warning(f'U+{pt:04X} annotations: cannot parse line {line!r}')
                continue
            xpt = int(match.group(1), 16)
            label = match.group(2)
            variations[chr(xpt)] = label
        lst = lists[code]
        lst += [s]
    return Annot(
        see_also=lists['x'],
        comments=lists['*'],
        variations=variations,
    )

# int uniNamesList_blockNumber(unsigned long uni);
_libunl_block_no = _libunl.uniNamesList_blockNumber
_libunl_block_no.argtypes = [ctypes.c_ulong]
_libunl_block_no.restype = ctypes.c_int

# long uniNamesList_blockStart(int uniBlock);
_libunl_block_start = _libunl.uniNamesList_blockStart
_libunl_block_start.argtypes = [ctypes.c_int]
_libunl_block_start.restype = ctypes.c_long

# long uniNamesList_blockEnd(int uniBlock);
_libunl_block_end = _libunl.uniNamesList_blockEnd
_libunl_block_end.argtypes = [ctypes.c_int]
_libunl_block_end.restype = ctypes.c_long

# const char *uniNamesList_blockName(int uniBlock);
_libunl_block_name = _libunl.uniNamesList_blockName
_libunl_block_name.argtypes = [ctypes.c_int]
_libunl_block_name.restype = ctypes.c_char_p

class Block(typing.NamedTuple):
    start: int
    stop: int
    name: str

def get_block(ch):
    pt = ord(ch)
    i = _libunl_block_no(pt)
    if i < 0:
        return None
    start = _libunl_block_start(i)
    stop = _libunl_block_end(i)
    name = _libunl_block_name(i).decode('UTF-8')
    return Block(start, stop, name)

class PropertyValue(typing.NamedTuple):
    short: str
    long: str

    def __str__(self):
        return f'{self.short} ({self.long})'

def vcmp(v1, v2):
    '''
    cmp()-style version comparison
    '''
    v1 = v1.split('.')
    v2 = v2.split('.')
    for c1, c2 in itertools.zip_longest(v1, v2, fillvalue=0):
        c1 = int(c1)
        c2 = int(c2)
        if c1 > c2:
            return 1
        if c1 < c2:
            return -1
    return 0

def get_script(ch):
    if icu is None:
        return None
    if vcmp(icu.VERSION, '2.4.3') < 0:
        return None
    i = icu.Char.getIntPropertyValue(ch, icu.UProperty.SCRIPT)
    names = (
        icu.Char.getPropertyValueName(icu.UProperty.SCRIPT, i, choice)
        for choice in (
            icu.UPropertyNameChoice.SHORT_PROPERTY_NAME,
            icu.UPropertyNameChoice.LONG_PROPERTY_NAME,
        )
    )
    return PropertyValue(*names)

_age_to_date = {
    # source: https://www.unicode.org/versions/enumeratedversions.html
    '1.1': 1993,
    '2.0': 1996,
    '2.1': 1998,
    '3.0': 1999,
    '3.1': 2001,
    '3.2': 2002,
    '4.0': 2003,
    '4.1': 2005,
    '5.0': 2006,
    '5.1': 2008,
    '5.2': 2009,
    '6.0': 2010,
    '6.1': 2012,
    '6.2': 2012,
    '6.3': 2013,
    '7.0': 2014,
    '8.0': 2015,
    '9.0': 2016,
    '10.0': 2017,
    '11.0': 2018,
    '12.0': 2019,
    '12.1': 2019,
    '13.0': 2020,
    '14.0': 2021,
    '15.0': 2022,
}

def get_age(ch):
    if icu is None:
        return None
    # TODO: cover Unicode 1.0 too
    age = icu.Char.charAge(ch)
    if age == '0.0':
        return None
    date = _age_to_date.get(age)
    if date is not None:
        age = f'{age} ({date})'
    return age

@cache
def _get_prop_alias_data():
    data = collections.defaultdict(dict)
    path = '/usr/share/unicode/PropertyValueAliases.txt'
    with open(path, 'rt', encoding='UTF-8') as file:
        for line in file:
            line = line.partition('#')[0]
            line = line.rstrip()
            if not line:
                continue
            line = line.split(';')
            (prop, k1, k2, *tail) = map(str.strip, line)
            del tail
            assert k1 not in data[prop], f'{prop}={k1} already seen'
            data[prop][k1] = k2
    return data

def get_category_alias(cat):
    return _get_prop_alias_data()['gc'][cat]

def float2frac(x):
    (n, d) = x.as_integer_ratio()
    (p0, q0, p1, q1) = (0, 1, 1, 0)
    while d != 0:
        a = n // d
        (p0, q0, p1, q1) = (p1, q1, p0 + a * p1, q0 + a * q1)
        (n, d) = (d, n - a * d)
        if p1 / q1 == x:
            return fractions.Fraction(p1, q1)
    raise ValueError

def get_numeric_value(ch):
    try:
        nv = unicodedata.numeric(ch)
    except ValueError:
        return None
    return float2frac(nv)

def format_name(ch):
    pt = ord(ch)
    name = unicodedata.name(ch, '')
    cat = unicodedata.category(ch)
    if not name:
        # code point label
        # (see The Unicode Standard version 13.0, Â§4.8)
        label_prefix = dict(
            Cc='control',
            Cn='reserved',
            Co='private-use',
            Cs='surrogate',
        ).get(cat)
        if pt & 0xFFFF >= 0xFFFE or 0xFDD0 <= pt < 0xFDF0:
            assert label_prefix == 'reserved'
            label_prefix = 'noncharacter'
        if label_prefix:
            name = f'<{label_prefix}-{pt:04X}>'
    return f'U+{pt:04X}{name and " "}{name or ""}'

def format_glyph(ch):
    cat = unicodedata.category(ch)
    if cat[0] == 'C':
        return None
    if cat[0] == 'M':
        if ch in '\u180B\u180C\u180D':
            # MONGOLIAN FREE VARIATION SELECTOR {ONE,TWO,THREE}
            return None
        if '\uFE00' <= ch <= '\uFE0F':
            # VARIATION SELECTOR-{1,â¦,16}
            return None
        if '\U000E0100' <= ch <= '\U000E01EF':
            # VARIATION SELECTOR-{17,â¦,256}
            return None
        return '\N{DOTTED CIRCLE}' + ch
    if cat == 'Zs':
        return f'[{ch}]'
    if cat in {'Zl', 'Zp'}:
        return None
    return ch

class C():

    escape = {}
    unescape = {}
    for e in 'abfnrtv':
        c = ast.literal_eval(f'"\\{e}"')
        unescape[f'\\{e}'] = c
        escape[c] = f'\\{e}'
    del e, c

def filter_char_names(flt):
    for pt in range(0xF0000):
        ch = chr(pt)
        name = unicodedata.name(ch, None)
        if not name:
            continue
        if flt(name):
            yield ch
    # FIXME: We should take aliases and named sequences into account.

def main():
    ap = argparse.ArgumentParser(description=__doc__)
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'  # pylint: disable=protected-access
    ap.add_argument('--version', action=VersionAction)
    ag = ap.add_mutually_exclusive_group()
    ag.add_argument('-r', '--regexp', action='store_true', help='show info about characters matching regexp')
    ag.add_argument('-s', '--string', action='store_true', help='show info about characters in the string')
    ap.add_argument('-p', '--print', action='store_true', help='print only characters')
    ap.add_argument('name', metavar='NAME')
    ap.add_argument('tail', metavar='...', nargs=argparse.REMAINDER, help=argparse.SUPPRESS)
    options = ap.parse_args()
    if options.print:
        show = print_chars
    else:
        show = show_chars
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    name = str.join(' ', [options.name, *options.tail])
    if options.string:
        show(name)
        return
    if options.regexp:
        regexp = re.compile(name, flags=re.IGNORECASE)
        s = filter_char_names(regexp.search)
        show(s)
        return
    if name in C.unescape:
        s = C.unescape[name]
        show(s)
        return
    match = re.fullmatch(r'[uU][+]([0-9A-Fa-f]+)|&(?:#x([0-9A-Fa-f]+)|#([0-9]+)|([^\s&#;]+));?', name)
    name = name.upper()
    if match:
        (pt_hex1, pt_hex2, pt_dec, ent) = match.groups()
        if ent is not None:
            assert ent[-1] != ';'
            ent += ';'
            try:
                s = html.entities.html5[ent]
            except KeyError:
                error(f'no such HTML5 entity: &{ent}')
        else:
            if pt_dec is not None:
                pt = int(pt_dec)
            else:
                pt = int(pt_hex1 or pt_hex2, 16)
            if pt > sys.maxunicode:
                error(f'code point out of range: 0x{pt:04X} > 0x{sys.maxunicode:X}')
            s = chr(pt)
    elif set(name) & set('?*[]'):
        pattern = name
        regexp = fnmatch.translate(pattern)
        regexp = re.compile(regexp)
        s = filter_char_names(regexp.match)
    else:
        try:
            s = unicodedata.lookup(name)
        except KeyError as exc:
            error(exc.args[0])
        if len(s) > 1:
            print(name.upper())
            print('Sequence:')
            for ch in s:
                print(' ', format_name(ch))
            print()
    show(s)

def print_chars(s):
    for ch in s:
        glyph = format_glyph(ch)
        if glyph:
            print(glyph)

def show_chars(s):
    want_sep = False
    for ch in s:
        if want_sep:
            print()
        show_char(ch)
        want_sep = True

def show_char(ch):
    print(format_name(ch))
    aliases = get_aliases(ch)
    if aliases:
        print('Aliases:')
        for alias in aliases:
            print(f'  {alias.name} ({alias.label})')
    glyph = format_glyph(ch)
    if glyph:
        print(f'Text: {glyph}')
    mnemonic = get_mnemonic(ch)
    if mnemonic and mnemonic != ch:
        print(f'RFC-1345: {mnemonic}')
    x11_seqs = get_x11_seqs(ch)
    if x11_seqs:
        print('X11 multi-key input sequences:')
        for x11_seq in x11_seqs:
            print(' ', x11_seq)
    if ch in C.escape:
        print('C escape:', C.escape[ch])
    ents = get_html5_entities(ch)
    if ents:
        print(
            'HTML5:',
            *(f'&{e}' for e in sorted(ents))
        )
    cat = unicodedata.category(ch)
    long_cat = get_category_alias(cat)
    print(f'Category: {cat} ({long_cat})')
    block = get_block(ch)
    if block:
        print(f'Block: U+{block.start:04X}..U+{block.stop:04X} {block.name}')
    script = get_script(ch)
    if script and script.short != 'Zzzz':
        print(f'Script: {script}')
    nv = get_numeric_value(ch)
    if nv is not None:
        print(f'Numeric value: {nv}')
    annots = get_annot(ch)
    if annots.variations:
        print('Variations:')
        for vch, vlabel in sorted(annots.variations.items()):
            print(' ', format_name(vch), vlabel)
    if annots.see_also:
        print('See also:')
        for xch in annots.see_also:
            print(' ', format_name(xch))
    if annots.comments:
        print('Comments:')
        for s in annots.comments:
            print(' ', s)
    age = get_age(ch)
    if age and not age.startswith('1.'):
        print('Added: Unicode', age)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
