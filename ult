#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import re
import sys
import unicodedata

0_0  # Python >= 3.6 is required

prog = argparse.ArgumentParser().prog

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('name', metavar='NAME', nargs='+')
    options = ap.parse_args()
    name = ' '.join(options.name).upper()
    match = re.match(r'\AU[+]([0-9A-F]{4,6})\Z', name)
    if match is None:
        try:
            ch = unicodedata.lookup(name)
        except KeyError as exc:
            msg = exc.args[0]
            print(f'{prog}: {msg}', file=sys.stderr)
            sys.exit(1)
        pt = ord(ch)
    else:
        pt = int(match.group(1), 16)
        ch = chr(pt)
    name = unicodedata.name(ch, '')
    cat = unicodedata.category(ch)
    if not name:
        if cat == 'Cn':
            name = 'non-character'
        elif cat == 'Cc':
            # TODO: elaborate
            name = 'control character'
        elif cat == 'Cs':
            name = 'lone surrogate'
    glyph = ch
    if cat[0] == 'C':
        glyph = None
    elif cat[0] == 'M':
        glyph = '\N{DOTTED CIRCLE}' + ch
    print(f'U+{pt:04X} {name or ""}')
    if glyph:
        print(f'Text: {glyph}')
    print(f'Category: {cat}')
    print()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
